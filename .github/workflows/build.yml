name: 'Build'
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            BUILD_CMD: pyinstaller -F --add-binary Linux/avrdude:. --add-binary Linux/dfu-util:. --add-data Linux/avrdude.conf:. --add-data gui.ui:. --noconsole --name TonUINO_TNG_upload_linux TonUINO_TNG_upload.py
            POST_BUILD_CMD: >
              cd dist/ &&
              ls -Rls &&
              zip -r9 TonUINO_TNG_upload_linux TonUINO_TNG_upload_linux
            OUT_FILE_NAME: TonUINO_TNG_upload_linux.zip
          - os: macos-latest
            BUILD_CMD: pyinstaller -F --add-binary MacOS/avrdude:. --add-binary MacOS/dfu-util:. --add-data MacOS/avrdude.conf:. --add-data gui.ui:. --noconsole --name TonUINO_TNG_upload_mac TonUINO_TNG_upload.py
            POST_BUILD_CMD: >
              cd dist/ &&
              ls -Rls &&
              zip -r9 TonUINO_TNG_upload_mac TonUINO_TNG_upload_mac.app
            OUT_FILE_NAME: TonUINO_TNG_upload_mac.zip
          - os: windows-latest
            BUILD_CMD: pyinstaller -F --add-binary Windows/avrdude.exe:. --add-binary Windows/dfu-util.exe:. --add-data Windows/avrdude.conf:. --add-data gui.ui:. --noconsole --name TonUINO_TNG_upload_windows TonUINO_TNG_upload.py
            POST_BUILD_CMD: >
              cd dist/ &&
              ls &&
              7z a TonUINO_TNG_upload_windows.zip TonUINO_TNG_upload_windows.exe
            OUT_FILE_NAME: TonUINO_TNG_upload_windows.zip
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies for ${{ matrix.os }}
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Pre-Build for ${{ matrix.os }}
        if: ${{ matrix.PRE_BUILD_CMD != '' }}
        run: ${{ matrix.PRE_BUILD_CMD }}
      - name: Build with pyinstaller for ${{ matrix.os }}
        run: ${{ matrix.BUILD_CMD }}
      - name: Post-Build for ${{ matrix.os }}
        if: ${{ matrix.POST_BUILD_CMD != '' }}
        run: ${{ matrix.POST_BUILD_CMD }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{runner.os}}
          path: ./dist/${{ matrix.OUT_FILE_NAME }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: create deploy directory
        run: mkdir deploy
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Linux
          path: deploy
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS
          path: deploy
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Windows
          path: deploy
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

